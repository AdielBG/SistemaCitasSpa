@model SistemaCitasSpa.Models.Citum

@{
    ViewData["Title"] = "Registrar Cita";
}

<h1 class="mb-4">Registrar Cita</h1>

@if (!string.IsNullOrEmpty(ViewBag.Error))
{
    <div class="alert alert-danger">@ViewBag.Error</div>
}

@if (!string.IsNullOrEmpty(ViewBag.ValidationErrors))
{
    <div class="alert alert-warning">@ViewBag.ValidationErrors</div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<form asp-action="Create" method="post" class="needs-validation" novalidate>
    @Html.AntiForgeryToken()

    @if (!ViewData.ModelState.IsValid && ViewData.ModelState.Values.Any(v => v.Errors.Count > 0))
    {
        @Html.ValidationSummary(false, "Por favor, corrija los siguientes errores:", new { @class = "alert alert-danger" })
    }

    <div class="row mb-3">
        <div class="col-md-4">
            <label for="PacienteID" class="form-label">Paciente:</label>
            @if (ViewBag.Pacientes != null)
            {
                @Html.DropDownListFor(model => model.PacienteID, (SelectList)ViewBag.Pacientes, "Seleccione un paciente", new { @class = "form-select", @required = "required" })
            }
            else
            {
                <select name="PacienteID" class="form-select" disabled>
                    <option>Error al cargar pacientes</option>
                </select>
            }
            @Html.ValidationMessageFor(model => model.PacienteID, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-4">
            <label for="ServicioID" class="form-label">Servicio:</label>
            @if (ViewBag.Servicios != null)
            {
                @Html.DropDownListFor(model => model.ServicioID, (SelectList)ViewBag.Servicios, "Seleccione un servicio", new { @class = "form-select", @required = "required" })
            }
            else
            {
                <select name="ServicioID" class="form-select" disabled>
                    <option>Error al cargar servicios</option>
                </select>
            }
            @Html.ValidationMessageFor(model => model.ServicioID, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-4">
            <label for="TerapeutaID" class="form-label">Terapeuta:</label>
            @if (ViewBag.Terapeutas != null)
            {
                @Html.DropDownListFor(model => model.TerapeutaID, (SelectList)ViewBag.Terapeutas, "Seleccione un terapeuta", new { @class = "form-select", @required = "required" })
            }
            else
            {
                <select name="TerapeutaID" class="form-select" disabled>
                    <option>Error al cargar terapeutas</option>
                </select>
            }
            @Html.ValidationMessageFor(model => model.TerapeutaID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="Fecha" class="form-label">Fecha:</label>
            @Html.TextBoxFor(model => model.Fecha, new { @type = "date", @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6">
            <label for="Hora" class="form-label">Hora:</label>
            @Html.TextBoxFor(model => model.Hora, new { @type = "time", @class = "form-control", @required = "required" })
            @Html.ValidationMessageFor(model => model.Hora, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="mt-4">
        <input type="submit" value="Guardar" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary ms-2">Cancelar</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.querySelector('form').addEventListener('submit', function(e) {
            console.log('Formulario enviado');

            // Verificar los valores del formulario
            const formData = new FormData(this);
            for (let [key, value] of formData.entries()) {
                console.log(key + ': ' + value);
            }

            // Verificar si hay errores de validación HTML5
            const inputs = this.querySelectorAll('input, select');
            let hasErrors = false;
            inputs.forEach(input => {
                if (!input.checkValidity()) {
                    console.log('Error en:', input.name, input.validationMessage);
                    hasErrors = true;
                }
            });

            if (hasErrors) {
                console.log('Hay errores de validación HTML5');
                e.preventDefault();
                return false;
            }
        });
    </script>
}
